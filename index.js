// Generated by CoffeeScript 1.6.3
var fs, isString, isStyl, kew, path, stylus;

path = require('path');

fs = require('fs');

stylus = require('stylus');

kew = require('kew');

isString = function(o) {
  return Object.prototype.toString.call(o) === '[object String]';
};

isStyl = /\.(styl|css)$/;

module.exports = function(options) {
  var contentType, dirname, render, rendered;
  if (isString(options)) {
    options = {
      entry: options
    };
  }
  contentType = options.contentType || 'text/css';
  rendered = void 0;
  render = function() {
    rendered = kew.defer();
    fs.readFile(options.entry, function(err, data) {
      var renderer, use, _i, _len, _ref;
      if (err) {
        return rendered.reject(err);
      }
      renderer = stylus(data.toString(), {
        filename: options.entry
      });
      if (options.includeCSS != null) {
        renderer = renderer.set('include css', options.includeCSS);
      }
      if (options.use != null) {
        _ref = options.use;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          use = _ref[_i];
          renderer = renderer.use(require(use)());
        }
      }
      if (options.configure != null) {
        renderer = options.configure(renderer);
      }
      return renderer.render(function(err, result) {
        if (err) {
          return rendered.reject(err);
        }
        return rendered.resolve(result);
      });
    });
    return rendered;
  };
  render();
  if (options.watch !== false) {
    dirname = path.dirname(options.entry);
    fs.watch(dirname, {
      persistent: false
    }, function(ev, filename) {
      if (isStyl.test(filename)) {
        return render();
      }
    });
  }
  return function(req, res, next) {
    res.setHeader('Content-type', contentType);
    return rendered.then(function(result) {
      return res.end(result);
    }).fail(next);
  };
};
