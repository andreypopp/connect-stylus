// Generated by CoffeeScript 1.7.1
var fs, isString, isStyl, path, stylus;

path = require('path');

fs = require('fs');

stylus = require('stylus');

isString = function(o) {
  return Object.prototype.toString.call(o) === '[object String]';
};

isStyl = /\.(styl|css)$/;

module.exports = function(options) {
  var cache, contentType, dirname, render;
  if (isString(options)) {
    options = {
      entry: options
    };
  }
  contentType = options.contentType || 'text/css';
  cache = null;
  render = function(done) {
    return fs.readFile(options.entry, function(err, data) {
      var renderer, use, _i, _len, _ref;
      if (err != null) {
        return done(err);
      }
      renderer = stylus(data.toString(), {
        filename: options.entry
      });
      if (options.includeCSS != null) {
        renderer = renderer.set('include css', options.includeCSS);
      }
      if (options.use != null) {
        _ref = options.use;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          use = _ref[_i];
          renderer = renderer.use(require(use)());
        }
      }
      if (options.configure != null) {
        renderer = options.configure(renderer);
      }
      return renderer.render(function(err, results) {
        cache = results;
        return done(err, results);
      });
    });
  };
  if (options.watch !== false) {
    dirname = path.dirname(options.entry);
    fs.watch(dirname, {
      persistent: false
    }, function(ev, filename) {
      if (isStyl.test(filename)) {
        return render();
      }
    });
  }
  return function(req, res, next) {
    res.setHeader('Content-type', contentType);
    if (cache != null) {
      return res.end(cache);
    }
    return render(function(err, css) {
      if (err != null) {
        return next(err);
      }
      return res.end(css);
    });
  };
};
